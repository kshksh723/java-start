package cond;

public class Ex {
    /*
                 * if vs switch문
                 
    switch문의 조건식을 넣는 부분을 잘 보면 x > 10과 같은 참 거짓의 결과가 나오는 조건이 아니라, 단순히 값만 넣을 수 있다
    switch문은 조건식이 특정 case와 같은지만 체크할 수 있다
    쉽게 이야기 해서 값이 같은지 확인하는 연산만 가능하다 (문자도 가능)
    반면 if문은 참 거짓의 결과가 나오는 조건식을 자유롭게 적을 수 있다 ex) x > 10, x == 10

    정리하자면 switch문 없이 if문만 사용해도 된다. 하지만 특정 값에 따라 코드를 실행할 때는 switch문을 사용하면 if문 보다 간결한 코드를 작성
    할 수 있다
    
    
    * 참과 거짓에 따라서 특정 값을 구하는 경우 삼항 연산자 또는 조건 연산자라고 불리는 ?: 연산자를 사용할 수 있다
         이 연산자를 사용하면 if문과 비교해서 코드를 단순화 할 수 있다


     */
    
    /*
                    for vs while
          둘을 비교했을 때 for문이 더 깔끔하다는 느낌을 받을 것이다.
          for문은 초기화, 조건 검사, 반복 후 작업 등이 규칙적으로 한 줄에 모두 들어 있어
          코드를 이해하기 더 쉽다. 특히 반복을 위해 값이 증가하는 카운터 변수를 다른 부분과 명확하게 구분할 수 있다
          
          for (int i = 1; i <= endNum; i++)
          
          여기서는 바로 변수 i가 카운터 변수(값을 증가시켜서 카운터 변수라 불림)이다.
          증가하면서 반복 횟수가 올라가고, 또 변수 i를 사용해서 계속 반복할지 아니면 빠져 나갈 지 판단할 수 있다
          이렇게 반복 횟수에 직접적인 영향을 주는 변수를 선언 부터 값 증가
          또 조건식에 활용까지 for(초기식; 조건식; 증감식) 구조를 활용해서 처리하는 것이다


          while vs for

          for문
          장점 :
          1. 초기화, 조건 체크, 반복 후의 작업을 한 줄에서 처리할 수 있어 편리하다
          2. 정해진 횟수만큼의 반복을 수행하는 경우에 사용하기 적합하다
          3. 루프 변수의 범위가 for 루프 블록에 제한되므로, 다른 곳에서 이 변수를 실수로 변경할 가능성이 적다

          단점 :
          1. 루프의 조건이 루프 내부에서 변경되는 경우, for 루프는 관리하기 어렵다
          2. 복잡한 조건을 가진 반복문을 작성하기에는 while문이 더 적합할 수 있다

          while문
          장점 :
          1. 루프의 조건이 루프 내부에서 변경되는 경우, while 루프는 이를 관리하기 쉽다
          2. for 루프보다 더 복잡한 조건과 시나리오네 적합하다
          3. 조건이 충족되는 동안 계속해서 루프를 실행하며, 종료 시점을 명확하게 알 수 없는 경우에 유용하다

          단점 :
          1. 초기화, 조건 체크, 반복 후의 작업이 분산되어 있어 코드를 이해하거나 작성하기 어려울 수 있다.
          2. 루프 변수가 while 블록 바깥에서도 접근 가능하므로 이 변수를 실수로 변경하는 상황이 발생할 수 있다

          한줄로 정리하자면 정해진 횟수만큼 반복을 수행해야 하면 for문을 사용하고 그렇지 않으면 while문을 사용하면 된다
          물론 이것이 항상 정답은 아니니 기준으로 삼는 정도로 이해하자
    
     */
}
